#include <Arduino.h>
#include <IRremoteESP8266.h>
#include <IRsend.h>

const uint16_t kIrLed = 4; // ESP8266 GPIO pin to use. Recommended: 4 (D2).

// 开空调指令
uint16_t ACon[279] = {8988, 4488, 652, 556, 648, 554, 652, 1656, 650, 1656, 650, 1656, 652, 1656, 650, 1656, 650, 556, 652, 554, 650, 1656, 652, 554, 650, 1658, 650, 554, 650, 556, 650, 554, 650, 554, 652, 554, 650, 554, 652, 554, 652, 554, 650, 556, 650, 554, 650, 556, 650, 556, 650, 556, 650, 554, 650, 556, 650, 554, 650, 1656, 650, 554, 650, 1656, 652, 554, 650, 554, 650, 1656, 650, 554, 650, 19990, 650, 554, 650, 554, 652, 554, 652, 554, 650, 554, 650, 554, 652, 554, 650, 554, 650, 554, 650, 554, 650, 556, 650, 554, 650, 556, 650, 554, 652, 554, 652, 554, 650, 554, 650, 556, 650, 554, 652, 554, 650, 556, 650, 556, 650, 556, 650, 554, 652, 554, 652, 556, 650, 554, 650, 556, 650, 556, 650, 556, 650, 556, 650, 556, 650, 40000, 8990, 4488, 650, 556, 650, 556, 650, 1656, 650, 1656, 652, 1656, 650, 1656, 650, 1656, 652, 554, 650, 554, 650, 1656, 650, 556, 650, 1656, 650, 554, 650, 556, 650, 556, 650, 556, 650, 554, 652, 554, 650, 556, 648, 556, 650, 554, 650, 556, 652, 554, 650, 554, 650, 556, 650, 554, 652, 554, 650, 556, 652, 1654, 652, 1656, 652, 1656, 652, 554, 650, 554, 652, 1656, 652, 554, 650, 19990, 650, 556, 650, 554, 652, 556, 650, 554, 650, 556, 652, 554, 650, 554, 650, 554, 652, 554, 650, 554, 652, 554, 652, 554, 652, 552, 652, 554, 652, 554, 650, 554, 652, 554, 650, 554, 650, 554, 652, 554, 650, 1656, 652, 1656, 652, 554, 650, 556, 650, 554, 650, 554, 652, 556, 652, 554, 652, 1656, 650, 1658, 650, 554, 650, 554, 652}; // COOLIX B2BF80

// 关空调指令
uint16_t ACoff[279] = {8988, 4490, 650, 556, 650, 556, 650, 1658, 650, 556, 650, 1656, 650, 1656, 650, 1658, 650, 556, 650, 554, 650, 1658, 650, 554, 650, 1656, 650, 554, 652, 554, 650, 556, 650, 554, 650, 556, 650, 554, 650, 556, 650, 554, 652, 554, 650, 554, 652, 554, 652, 554, 652, 554, 652, 554, 652, 554, 652, 554, 652, 1656, 652, 552, 652, 1654, 654, 552, 678, 528, 676, 1630, 676, 528, 678, 19960, 684, 520, 684, 522, 684, 520, 684, 522, 684, 522, 682, 522, 684, 522, 682, 522, 682, 524, 680, 524, 682, 524, 682, 524, 682, 524, 682, 524, 682, 524, 680, 526, 680, 524, 680, 526, 680, 526, 680, 526, 678, 526, 680, 526, 678, 526, 678, 526, 678, 526, 678, 528, 678, 526, 656, 550, 678, 528, 654, 552, 652, 552, 652, 1656, 652, 40000, 8988, 4490, 650, 552, 652, 554, 652, 1656, 650, 554, 652, 1656, 650, 1658, 650, 1658, 650, 552, 652, 554, 652, 1656, 650, 554, 652, 1658, 648, 554, 652, 554, 650, 556, 650, 554, 652, 554, 650, 554, 652, 554, 650, 554, 650, 556, 650, 556, 650, 554, 652, 554, 650, 554, 650, 554, 652, 554, 650, 556, 650, 1680, 628, 1678, 628, 1678, 628, 556, 650, 556, 648, 1680, 628, 556, 648, 20012, 628, 556, 650, 556, 650, 556, 648, 556, 650, 556, 648, 556, 648, 558, 648, 558, 646, 558, 648, 558, 648, 558, 648, 558, 646, 558, 648, 558, 646, 580, 626, 560, 646, 580, 626, 580, 626, 580, 626, 580, 626, 1682, 624, 1680, 626, 580, 626, 578, 626, 580, 626, 580, 624, 580, 626, 580, 626, 1682, 626, 1682, 624, 580, 624, 1684, 622}; // GREE uint8_t state[8] = {0x74, 0x0A, 0x00, 0x50, 0x00, 0x00, 0x00, 0x80}; // COOLIX B27BE0

int khz = 38; // 38kHz carrier frequency for the NEC protocol

IRsend irsend(kIrLed); // Set the GPIO to be used to sending the message.

void setup()
{
    irsend.begin();
    Serial.begin(115200, SERIAL_8N1, SERIAL_TX_ONLY);
}

void loop()
{
    Serial.println("On");

    irsend.sendRaw(ACon, sizeof(ACon) / sizeof(ACon[0]), khz);
    delay(2000); // Send

    delay(10000);
    Serial.println("Off");
    irsend.sendRaw(ACoff, sizeof(ACoff) / sizeof(ACoff[0]), khz);
    delay(2000); // Send

    delay(2000);
}